<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 配置处理器、适配器、映射器的方式一：自动配置  start	 推荐这种方式-->
<!-- controller注解,多个包中间使用半角逗号分隔 ,使用此组件扫描器，省去了配置繁琐的映射器和适配器 @controller-->
<context:component-scan base-package="com.yao.controller"/>
<!-- 自动注解适配器和映射器 1 @RequestMapping	 推荐这种方式-->
<mvc:annotation-driven />
<!-- 自动注解适配器和映射器 2 @RequestMapping-->
<!--注解适配器 -->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>
<!--注解映射器 -->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
	
 	<!-- 配置处理器、适配器、映射器的方式一：自动配置   end-->
 	
	<!-- 配置处理器、适配器、映射器的方式二：手动配置   start-->
<!-- 处理器,即controller配置 -->
<!-- name="/items1.action"：前边配置的处理器映射器为BeanNameUrlHandlerMapping，
如果请求的URL 为“上下文/items1.action”将会成功映射到ItemList1控制器。 -->
<bean name="/items1name.action" id="itemList1" class="com.yao.controller.ItemList1"/>	
<bean id="itemList2" class="com.yao.controller.ItemList2"/>	

<!-- 处理器适配器 	SimpleControllerHandlerAdapter-->
<!-- SimpleControllerHandlerAdapter：即简单控制器处理器适配器，
所有实现了org.springframework.web.servlet.mvc.Controller 接口的Bean作为Springmvc的后端控制器。 -->
<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/> 

<!-- 处理器适配器 	HttpRequestHandlerAdapter-->
<!-- HttpRequestHandlerAdapter，http请求处理器适配器，
所有实现了org.springframework.web.HttpRequestHandler 接口的Bean通过此适配器进行适配、执行。 -->
<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>

<!-- 处理器映射器   	BeanNameUrlHandlerMapping-->
<!-- BeanNameUrlHandlerMapping：表示将定义的Bean名字作为请求的url，
需要将编写的controller在spring容器中进行配置，且指定bean的name为请求的url，且必须以.action结尾 -->
<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />

<!-- 处理器映射器 	simpleUrlHandlerMapping-->
<!--simpleUrlHandlerMapping是BeanNameUrlHandlerMapping的增强版本，它可以将url和处理器bean的id进行统一映射配置。  -->
<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	<property name="mappings">
		<props>
			<!-- <prop key="/items1.action">controller的bean id</prop> -->
			<prop key="/items1.action">itemList1</prop>
			<prop key="/items2.action">itemList2</prop>
		</props>
	</property>
</bean>
	<!-- 配置处理器、适配器、映射器的方式二：手动配置     end-->

<!-- 配置视图解析器 	InternalResourceViewResolver-->
<!-- InternalResourceViewResolver：支持JSP视图解析   ;  prefix 和suffix：查找视图页面的前缀和后缀，最终视图的址为：
前缀+逻辑视图名+后缀，逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为hello，则最终返回的jsp视图地址 “WEB-INF/jsp/hello.jsp” -->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	<property name="prefix" value="/WEB-INF/pages/"/>
	<property name="suffix" value=".jsp"/>
</bean>

</beans>